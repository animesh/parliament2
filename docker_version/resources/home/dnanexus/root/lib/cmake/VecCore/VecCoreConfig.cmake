set(VecCore_VERSION 0.4.2)
set(VecCore_VERSION_MAJOR 0)
set(VecCore_VERSION_MINOR 4)
set(VecCore_VERSION_PATCH 2)

get_filename_component(VecCore_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

list(APPEND CMAKE_MODULE_PATH "${VecCore_CMAKE_DIR}")

set(VecCore_ROOT_DIR "${VecCore_CMAKE_DIR}/../../..")
set(VecCore_INCLUDE_DIR  "${VecCore_ROOT_DIR}/include")
set(VecCore_INCLUDE_DIRS "${VecCore_ROOT_DIR}/include")

set(_VecCore_FIND_QUIET)
if (VecCore_FIND_QUIETLY)
  set(_VecCore_FIND_QUIET QUIET)
endif()

set(_VecCore_NOT_FOUND_MESSAGE)

if (VecCore_FIND_COMPONENTS MATCHES "CUDA")
  find_package(CUDA 7.5 ${_VecCore_FIND_QUIET})
  if(NOT CUDA_FOUND)
    if(VecCore_FIND_REQUIRED_CUDA)
      set(_VecCore_NOT_FOUND_MESSAGE ${_VecCore_NOT_FOUND_MESSAGE}
        "Failed to find VecCore component \"CUDA\"\n")
    elseif(NOT VecCore_FIND_QUIETLY)
      message(WARNING "Failed to find VecCore component \"CUDA\"")
    endif()
  else()
    set(VecCore_CUDA_FOUND True)
    set(VecCore_CUDA_DEFINITIONS -DVECCORE_ENABLE_CUDA)
    set(VecCore_CUDA_INCLUDE_DIR ${CUDA_INCLUDE_DIRS})
  endif()
endif()

if (VecCore_FIND_COMPONENTS MATCHES "UMESIMD")
  find_package(UMESIMD 0.8.1 ${_VecCore_FIND_QUIET})
  if(NOT UMESIMD_FOUND)
    if(VecCore_FIND_REQUIRED_UMESIMD)
      set(_VecCore_NOT_FOUND_MESSAGE ${_VecCore_NOT_FOUND_MESSAGE}
        "Failed to find VecCore component \"UMESIMD\"\n")
    elseif(NOT VecCore_FIND_QUIETLY)
      message(WARNING "Failed to find VecCore component \"UMESIMD\"")
    endif()
  else()
    set(VecCore_UMESIMD_FOUND True)
    set(VecCore_UMESIMD_DEFINITIONS -DVECCORE_ENABLE_UMESIMD)
    set(VecCore_UMESIMD_INCLUDE_DIR ${UMESIMD_INCLUDE_DIRS})
  endif()
endif()

if (VecCore_FIND_COMPONENTS MATCHES "Vc")
  find_package(Vc 1.2.0 ${_VecCore_FIND_QUIET})
  if (NOT Vc_FOUND)
    if(VecCore_FIND_REQUIRED_Vc)
      set(_VecCore_NOT_FOUND_MESSAGE ${_VecCore_NOT_FOUND_MESSAGE}
        "Failed to find VecCore component \"Vc\"\n")
    elseif(NOT VecCore_FIND_QUIETLY)
      message(WARNING "Failed to find VecCore component \"Vc\"")
    endif()
  else()
    set(VecCore_Vc_FOUND True)
    set(VecCore_Vc_DEFINITIONS -DVECCORE_ENABLE_VC)
    set(VecCore_Vc_INCLUDE_DIR ${Vc_INCLUDE_DIR})
    set(VecCore_Vc_LIBRARIES ${VecCore_LIBRARIES} ${Vc_LIBRARIES})
  endif()
endif()

if (_VecCore_NOT_FOUND_MESSAGE)
  set(VecCore_FOUND False)
  set(VecCore_NOT_FOUND_MESSAGE ${_VecCore_NOT_FOUND_MESSAGE})
  return()
endif()

foreach(backend ${VecCore_FIND_COMPONENTS})
  set(VecCore_DEFINITIONS ${VecCore_DEFINITIONS} ${VecCore_${backend}_DEFINITIONS})
  set(VecCore_INCLUDE_DIRS ${VecCore_INCLUDE_DIRS} ${VecCore_${backend}_INCLUDE_DIR})
  set(VecCore_LIBRARIES ${VecCore_LIBRARIES} ${VecCore_${backend}_LIBRARIES})
endforeach()

list(REMOVE_DUPLICATES VecCore_INCLUDE_DIRS)
